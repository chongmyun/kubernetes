//쿠버네티스 보안
쿠버네티스 호스트는 모든 엑세스는 보안되아야 한다.
kube-apiserver 자체에 대한 엑세스를 제어
(kubectl,apid와 직접 엑세스해서 상호작용해 클러스트에서 모든작업을 수행하기때문에)
누가 접근하고 무엇을 할지 정의해야한다.

//쿠버네티스 인증
1. basic-auth-file -> csv파일에 비밀번호,이용자명,아이디를 작성 후 kube-apiserver 설정
curl -v -k https://master-node-ip:6443/api/v1/pods -u "user1:password123"

2. token-auth-fill -> csv파일에 토큰,이용자명,아이디,그룹(옵션)를 작성 후 kube-apiserver 설정
curl -v -k https://master-node-ip:6443/api/v1/pods --header "Authorization: Bearer <token>"
**1,2 번은 권장하지 않음

3.
curl -v -k https://master-node-ip:6443/api/v1/pods 
--key admin.key --cert admin.crt --cacert ca.crt

//kubeconfig
kubeconfig에 인증관련된 내용들을 작성해서 kubectl에 직접 타이핑하지 않고
해당 컨피그 파일을 바라보게 할 수 있다.
Cluster,Contexts,Users 세 부분으로 나눠져있다.
Cluster: 쿠버네티스 클러스트로 예를들어 테스트환경,상품환경,개발환경,클라우드공급자 
등등 여러개의 클러스트를 가지고 있다고 가정해보자
Contexts: 클러스트와 이용자를 연결해준다 에를들어 admin@테스트환경 ,dev-user@개발환경
Users: admin, dev-user, prod-user 이용자가 있다고 가정해보자 각각의 이용자는 원하는 클러스트에 접근을 하고 싶다.
사용하고자 하는 클러스트에 어떤사용자를 사용할지 정의할 수 있다.
** 클러스트에 사용자 엑세스나 권한을 설정하는게 아니다
** custom-config를 홈 디렉터리로 옮겨서 사용한다
** 현재 컨텍스트르 변경하기 위해선
    kubectl config use-context prod-user@production

//권한 부여 메커니즘
1. Node 인증 : kubelet 은 kube-apiserver에 노드에 대한정보를 보고 (노드 승인자가 처리)
2. ABAC 특성기반인증 : 사용자나 사용자 그룹을 허가 모음으로 연결
                    pod 생성,삭제,보기 를 이용할 그룹
                    구성하기가 까다롭다
3. RBAC 역할기반인증 : 권한모음을 개발자에게 부여  권한 추가 시 즉시 반영된다.
4. Webhook: 승인 메커니즘을 외부에 위탁
** AlwaysAllow,AlwayDeny 모드가 더 있다.
** kube-apiserver에 설정
   authroization-mode= Node,RBAC,Webhook (순차적으로 권한확인)
 
//RBAC 상세
역할기반인증 객체(ROLE) 생성 후 역할 바인딩(roleBinding)
롤 객체는 네임스페이스 안에서 적용된다
** 사용자가 클러스트의 특정리소스에 접근하고 싶다면
    kubectl auth can-i create deploymetns --as dev-user

//cluster Role
리소스는 네임스페이스나 클러스트 범위로 분류된다
생성할때 이름을 지정하지 않는 객체들은 클러스트 범위에 있다.(pv,nodes,clusterroles,clusterrolebindings,namespace..)

//admission controller(필터)
구성의 유효성 확인, 요청자체를 변경하거나 포드가 생성되기전에 추가작업수행
ps -ef | grep kube-apiserver | grep admission-plugins 를 이용해 플러그인을 확인할 수 있다.

//validating & mutation admission controller
요청을 변경하는 컨트롤러가 있고 유효성 검사하는 컨트롤러가 있다.
두가지다 하는 컨트롤러도 있다.
MutatingAdmmisionWebhook
ValidatingAdmmisionWebhook

//apiVersion
버전 업그레이드 방법
kubectl-convert -f <old-file> --output-version <new-api>
conver를 설치해줘야한다.

//custom resource
custom resource definition을 먼저 생성한다
custom controller를 생성해 controller 등록해서 사용
** 공부가 더 필요함

//operator Framework
custom resource definition와 custom controller 함께 패키지화하여
단일 엔티티로 배포할 수 있다 operator Framework를 사용하여

//Deployment strategy
recreate,rollingupdate 전략이 기본
배포옵션으로 지정할 전력은 아니지만 다른방식으로 구현가능
blue/green : blue: 옛날버전 green: 최신버전 (green에 대한 테스트가 끝나면 트래픽이 green으로 이전)
** service가 선택기로 blue를 선택(selector)하고 있다가 green이 테스트가 끝나면 service가 green을 선택(selector)한다

canary update: 최신 버전을 배포한뒤 트래픽이 이전버전과 최십버전을 바라보게한다
최신버전 트래픽은 소수만 들어가야하기때문에 설정해준다
replicas 를 줄여서 최신버전을 배포

//helm 설치
helm을 이용하여 애플리케이션에 포함된 모든 객체를 생성할 수 있다.
https://helm.sh/docs/intro/install/

